//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestTaskSystemGUI.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataModel", Namespace="http://schemas.datacontract.org/2004/07/PDM_WebService.WcfServiceLibrary.DataCont" +
        "racts")]
    [System.SerializableAttribute()]
    public partial class DataModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FolderId {
            get {
                return this.FolderIdField;
            }
            set {
                if ((this.FolderIdField.Equals(value) != true)) {
                    this.FolderIdField = value;
                    this.RaisePropertyChanged("FolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransmittableFile", Namespace="http://schemas.datacontract.org/2004/07/PDM_WebService.WcfServiceLibrary.DataCont" +
        "racts")]
    [System.SerializableAttribute()]
    public partial class TransmittableFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SerealizeObjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] SerealizeObject {
            get {
                return this.SerealizeObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SerealizeObjectField, value) != true)) {
                    this.SerealizeObjectField = value;
                    this.RaisePropertyChanged("SerealizeObject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Specification", Namespace="http://schemas.datacontract.org/2004/07/PDM_WebService.WcfServiceLibrary.DataCont" +
        "racts")]
    [System.SerializableAttribute()]
    public partial class Specification : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BendField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DesignationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ERPCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDPDMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaintXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaintYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaintZField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurfaceAreaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ThicknessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkpieceXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkpieceYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isDxfField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bend {
            get {
                return this.BendField;
            }
            set {
                if ((object.ReferenceEquals(this.BendField, value) != true)) {
                    this.BendField = value;
                    this.RaisePropertyChanged("Bend");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeMaterial {
            get {
                return this.CodeMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeMaterialField, value) != true)) {
                    this.CodeMaterialField = value;
                    this.RaisePropertyChanged("CodeMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Configuration {
            get {
                return this.ConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigurationField, value) != true)) {
                    this.ConfigurationField = value;
                    this.RaisePropertyChanged("Configuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Count {
            get {
                return this.CountField;
            }
            set {
                if ((object.ReferenceEquals(this.CountField, value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Designation {
            get {
                return this.DesignationField;
            }
            set {
                if ((object.ReferenceEquals(this.DesignationField, value) != true)) {
                    this.DesignationField = value;
                    this.RaisePropertyChanged("Designation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ERPCode {
            get {
                return this.ERPCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ERPCodeField, value) != true)) {
                    this.ERPCodeField = value;
                    this.RaisePropertyChanged("ERPCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IDPDM {
            get {
                return this.IDPDMField;
            }
            set {
                if ((object.ReferenceEquals(this.IDPDMField, value) != true)) {
                    this.IDPDMField = value;
                    this.RaisePropertyChanged("IDPDM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaintX {
            get {
                return this.PaintXField;
            }
            set {
                if ((object.ReferenceEquals(this.PaintXField, value) != true)) {
                    this.PaintXField = value;
                    this.RaisePropertyChanged("PaintX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaintY {
            get {
                return this.PaintYField;
            }
            set {
                if ((object.ReferenceEquals(this.PaintYField, value) != true)) {
                    this.PaintYField = value;
                    this.RaisePropertyChanged("PaintY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaintZ {
            get {
                return this.PaintZField;
            }
            set {
                if ((object.ReferenceEquals(this.PaintZField, value) != true)) {
                    this.PaintZField = value;
                    this.RaisePropertyChanged("PaintZ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Partition {
            get {
                return this.PartitionField;
            }
            set {
                if ((object.ReferenceEquals(this.PartitionField, value) != true)) {
                    this.PartitionField = value;
                    this.RaisePropertyChanged("Partition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SummMaterial {
            get {
                return this.SummMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.SummMaterialField, value) != true)) {
                    this.SummMaterialField = value;
                    this.RaisePropertyChanged("SummMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SurfaceArea {
            get {
                return this.SurfaceAreaField;
            }
            set {
                if ((object.ReferenceEquals(this.SurfaceAreaField, value) != true)) {
                    this.SurfaceAreaField = value;
                    this.RaisePropertyChanged("SurfaceArea");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Thickness {
            get {
                return this.ThicknessField;
            }
            set {
                if ((object.ReferenceEquals(this.ThicknessField, value) != true)) {
                    this.ThicknessField = value;
                    this.RaisePropertyChanged("Thickness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((object.ReferenceEquals(this.WeightField, value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkpieceX {
            get {
                return this.WorkpieceXField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkpieceXField, value) != true)) {
                    this.WorkpieceXField = value;
                    this.RaisePropertyChanged("WorkpieceX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkpieceY {
            get {
                return this.WorkpieceYField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkpieceYField, value) != true)) {
                    this.WorkpieceYField = value;
                    this.RaisePropertyChanged("WorkpieceY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isDxf {
            get {
                return this.isDxfField;
            }
            set {
                if ((this.isDxfField.Equals(value) != true)) {
                    this.isDxfField = value;
                    this.RaisePropertyChanged("isDxf");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoofTypes", Namespace="http://schemas.datacontract.org/2004/07/ServiceLibrary.TaskSystem.Constants")]
    public enum RoofTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        One = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Two = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Three = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Four = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Five = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Six = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VibroInsertionTypes", Namespace="http://schemas.datacontract.org/2004/07/ServiceLibrary.TaskSystem.Constants")]
    public enum VibroInsertionTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Twenty_mm = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Thirty_mm = 30,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ISolidWebService")]
    public interface ISolidWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/Search", ReplyAction="http://tempuri.org/ISolidWebService/SearchResponse")]
        TestTaskSystemGUI.ServiceReference1.DataModel[] Search(string nameSegment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/Search", ReplyAction="http://tempuri.org/ISolidWebService/SearchResponse")]
        System.Threading.Tasks.Task<TestTaskSystemGUI.ServiceReference1.DataModel[]> SearchAsync(string nameSegment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/SelectFile", ReplyAction="http://tempuri.org/ISolidWebService/SelectFileResponse")]
        TestTaskSystemGUI.ServiceReference1.TransmittableFile SelectFile(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/SelectFile", ReplyAction="http://tempuri.org/ISolidWebService/SelectFileResponse")]
        System.Threading.Tasks.Task<TestTaskSystemGUI.ServiceReference1.TransmittableFile> SelectFileAsync(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/GetPathSelectFile", ReplyAction="http://tempuri.org/ISolidWebService/GetPathSelectFileResponse")]
        string GetPathSelectFile(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/GetPathSelectFile", ReplyAction="http://tempuri.org/ISolidWebService/GetPathSelectFileResponse")]
        System.Threading.Tasks.Task<string> GetPathSelectFileAsync(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/GetConfigiguration", ReplyAction="http://tempuri.org/ISolidWebService/GetConfigigurationResponse")]
        string[] GetConfigiguration(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/GetConfigiguration", ReplyAction="http://tempuri.org/ISolidWebService/GetConfigigurationResponse")]
        System.Threading.Tasks.Task<string[]> GetConfigigurationAsync(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/GetSpecifications", ReplyAction="http://tempuri.org/ISolidWebService/GetSpecificationsResponse")]
        TestTaskSystemGUI.ServiceReference1.Specification[] GetSpecifications(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel, string configuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/GetSpecifications", ReplyAction="http://tempuri.org/ISolidWebService/GetSpecificationsResponse")]
        System.Threading.Tasks.Task<TestTaskSystemGUI.ServiceReference1.Specification[]> GetSpecificationsAsync(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel, string configuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/uploadDXF", ReplyAction="http://tempuri.org/ISolidWebService/uploadDXFResponse")]
        void uploadDXF(string name, int idpdm, string configuration, int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/uploadDXF", ReplyAction="http://tempuri.org/ISolidWebService/uploadDXFResponse")]
        System.Threading.Tasks.Task uploadDXFAsync(string name, int idpdm, string configuration, int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/CreateRoof", ReplyAction="http://tempuri.org/ISolidWebService/CreateRoofResponse")]
        void CreateRoof(int height, int wight, TestTaskSystemGUI.ServiceReference1.RoofTypes type, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/CreateRoof", ReplyAction="http://tempuri.org/ISolidWebService/CreateRoofResponse")]
        System.Threading.Tasks.Task CreateRoofAsync(int height, int wight, TestTaskSystemGUI.ServiceReference1.RoofTypes type, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/CreateVibroInsertion", ReplyAction="http://tempuri.org/ISolidWebService/CreateVibroInsertionResponse")]
        void CreateVibroInsertion(int height, int wight, TestTaskSystemGUI.ServiceReference1.VibroInsertionTypes type, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/CreateVibroInsertion", ReplyAction="http://tempuri.org/ISolidWebService/CreateVibroInsertionResponse")]
        System.Threading.Tasks.Task CreateVibroInsertionAsync(int height, int wight, TestTaskSystemGUI.ServiceReference1.VibroInsertionTypes type, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/OpenSolidWorks", ReplyAction="http://tempuri.org/ISolidWebService/OpenSolidWorksResponse")]
        void OpenSolidWorks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISolidWebService/OpenSolidWorks", ReplyAction="http://tempuri.org/ISolidWebService/OpenSolidWorksResponse")]
        System.Threading.Tasks.Task OpenSolidWorksAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISolidWebServiceChannel : TestTaskSystemGUI.ServiceReference1.ISolidWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SolidWebServiceClient : System.ServiceModel.ClientBase<TestTaskSystemGUI.ServiceReference1.ISolidWebService>, TestTaskSystemGUI.ServiceReference1.ISolidWebService {
        
        public SolidWebServiceClient() {
        }
        
        public SolidWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SolidWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SolidWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SolidWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestTaskSystemGUI.ServiceReference1.DataModel[] Search(string nameSegment) {
            return base.Channel.Search(nameSegment);
        }
        
        public System.Threading.Tasks.Task<TestTaskSystemGUI.ServiceReference1.DataModel[]> SearchAsync(string nameSegment) {
            return base.Channel.SearchAsync(nameSegment);
        }
        
        public TestTaskSystemGUI.ServiceReference1.TransmittableFile SelectFile(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel) {
            return base.Channel.SelectFile(dataSolidModel);
        }
        
        public System.Threading.Tasks.Task<TestTaskSystemGUI.ServiceReference1.TransmittableFile> SelectFileAsync(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel) {
            return base.Channel.SelectFileAsync(dataSolidModel);
        }
        
        public string GetPathSelectFile(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel) {
            return base.Channel.GetPathSelectFile(dataSolidModel);
        }
        
        public System.Threading.Tasks.Task<string> GetPathSelectFileAsync(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel) {
            return base.Channel.GetPathSelectFileAsync(dataSolidModel);
        }
        
        public string[] GetConfigiguration(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel) {
            return base.Channel.GetConfigiguration(dataSolidModel);
        }
        
        public System.Threading.Tasks.Task<string[]> GetConfigigurationAsync(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel) {
            return base.Channel.GetConfigigurationAsync(dataSolidModel);
        }
        
        public TestTaskSystemGUI.ServiceReference1.Specification[] GetSpecifications(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel, string configuration) {
            return base.Channel.GetSpecifications(dataSolidModel, configuration);
        }
        
        public System.Threading.Tasks.Task<TestTaskSystemGUI.ServiceReference1.Specification[]> GetSpecificationsAsync(TestTaskSystemGUI.ServiceReference1.DataModel dataSolidModel, string configuration) {
            return base.Channel.GetSpecificationsAsync(dataSolidModel, configuration);
        }
        
        public void uploadDXF(string name, int idpdm, string configuration, int version) {
            base.Channel.uploadDXF(name, idpdm, configuration, version);
        }
        
        public System.Threading.Tasks.Task uploadDXFAsync(string name, int idpdm, string configuration, int version) {
            return base.Channel.uploadDXFAsync(name, idpdm, configuration, version);
        }
        
        public void CreateRoof(int height, int wight, TestTaskSystemGUI.ServiceReference1.RoofTypes type, int userId) {
            base.Channel.CreateRoof(height, wight, type, userId);
        }
        
        public System.Threading.Tasks.Task CreateRoofAsync(int height, int wight, TestTaskSystemGUI.ServiceReference1.RoofTypes type, int userId) {
            return base.Channel.CreateRoofAsync(height, wight, type, userId);
        }
        
        public void CreateVibroInsertion(int height, int wight, TestTaskSystemGUI.ServiceReference1.VibroInsertionTypes type, int userId) {
            base.Channel.CreateVibroInsertion(height, wight, type, userId);
        }
        
        public System.Threading.Tasks.Task CreateVibroInsertionAsync(int height, int wight, TestTaskSystemGUI.ServiceReference1.VibroInsertionTypes type, int userId) {
            return base.Channel.CreateVibroInsertionAsync(height, wight, type, userId);
        }
        
        public void OpenSolidWorks() {
            base.Channel.OpenSolidWorks();
        }
        
        public System.Threading.Tasks.Task OpenSolidWorksAsync() {
            return base.Channel.OpenSolidWorksAsync();
        }
    }
}
